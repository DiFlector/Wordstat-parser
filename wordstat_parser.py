#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
–ê–≤—Ç–æ—Ä: DiFlector
"""

import requests
import time
import re
import os
import sys
import shutil
from urllib.parse import quote, urlencode
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import openpyxl
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter


class WordstatParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç"""
    
    def __init__(self, use_selenium=True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            use_selenium (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Selenium (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞)
        """
        self.use_selenium = use_selenium
        self.base_url = "https://wordstat.yandex.ru/"
        self.driver = None
        self.is_authorized = False  # –§–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        if use_selenium:
            self._init_selenium()
    
    def _init_selenium(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver...")
        
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-extensions")
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        methods = [
            ("webdriver-manager", self._init_with_webdriver_manager),
            ("—Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver", self._init_with_system_chrome),
            ("–ª–æ–∫–∞–ª—å–Ω—ã–π chromedriver", self._init_with_local_chrome),
            ("Firefox WebDriver", self._init_with_firefox)
        ]
        
        for method_name, method_func in methods:
            try:
                print(f"  –ü—Ä–æ–±—É–µ–º: {method_name}...")
                if method_func(chrome_options):
                    print(f"‚úì Selenium WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {method_name}")
                    return
            except Exception as e:
                print(f"  ‚úó {method_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                continue
        
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω WebDriver")
        print("  –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º –±–µ–∑ Selenium (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)")
        self.use_selenium = False
    
    def _init_with_webdriver_manager(self, chrome_options):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ webdriver-manager"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à webdriver-manager
        try:
#            cache_path = os.path.join(os.path.expanduser("~"), ".wdm")
#            if os.path.exists(cache_path):
#                shutil.rmtree(cache_path)
                print("  –û—á–∏—â–µ–Ω –∫—ç—à webdriver-manager")
        except:
            pass
            
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        return True
    
    def _init_with_system_chrome(self, chrome_options):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º chromedriver"""
        service = Service()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç chromedriver –∏–∑ PATH
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        return True
    
    def _init_with_local_chrome(self, chrome_options):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º chromedriver"""
        local_paths = [
            "chromedriver.exe",
            "./chromedriver.exe",
            "../chromedriver.exe"
        ]
        
        for path in local_paths:
            if os.path.exists(path):
                service = Service(path)
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                return True
        return False
    
    def _init_with_firefox(self, options_unused):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Firefox –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            from selenium.webdriver.firefox.options import Options as FirefoxOptions
            from selenium.webdriver.firefox.service import Service as FirefoxService
            from webdriver_manager.firefox import GeckoDriverManager
            
            firefox_options = FirefoxOptions()
            firefox_options.add_argument("--width=1920")
            firefox_options.add_argument("--height=1080")
            firefox_options.add_argument("--disable-gpu")
            
            service = FirefoxService(GeckoDriverManager().install())
            self.driver = webdriver.Firefox(service=service, options=firefox_options)
            return True
        except Exception:
            return False
    
    def authorize_wordstat(self):
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.driver:
            print("‚ùå WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        if self.is_authorized:
            print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –í–æ—Ä–¥—Å—Ç–∞—Ç")
            return True
        
        try:
            print("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç...")
            print("=" * 60)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –í–æ—Ä–¥—Å—Ç–∞—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            test_query = "—Ç–µ—Å—Ç"
            test_url = self.build_wordstat_url(test_query)
            
            print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –í–æ—Ä–¥—Å—Ç–∞—Ç: {test_url}")
            self.driver.get(test_url)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            page_source = self.driver.page_source.lower()
            page_title = self.driver.title.lower()
            
            # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if "–≤–æ—Ä–¥—Å—Ç–∞—Ç" in page_title and ("–≤–æ–π—Ç–∏" not in page_source or "login" not in page_source):
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                self.is_authorized = True
                return True
            
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç")
            print("")
            print("üîç –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            print("1. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ –≤–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç")
            print("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–æ—Ä–¥—Å—Ç–∞—Ç")
            print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –í–æ—Ä–¥—Å—Ç–∞—Ç")
            print("4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É")
            print("")
            print("‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Ö–æ–¥–∞...")
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
            for i in range(10, 0, -1):
                print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {i} —Å–µ–∫", end="\r")
                time.sleep(1)
            
            print("\n")
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.driver.refresh()
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            current_url = self.driver.current_url
            page_title = self.driver.title
            page_source = self.driver.page_source.lower()
            
            print(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success_indicators = [
                "–≤–æ—Ä–¥—Å—Ç–∞—Ç" in page_title.lower(),
                "wordstat" in current_url,
                "–∑–∞–ø—Ä–æ—Å–æ–≤" in page_source,
                "—á–∞—Å—Ç–æ—Ç–∞" in page_source
            ]
            
            failure_indicators = [
                "–≤–æ–π—Ç–∏" in page_source,
                "login" in page_source,
                "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in page_source,
                "passport.yandex" in current_url
            ]
            
            success_count = sum(success_indicators)
            failure_count = sum(failure_indicators)
            
            if success_count >= 2 and failure_count == 0:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print("   –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ä—Å–∏–Ω–≥—É —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
                self.is_authorized = True
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                print("   –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏")
                print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞: {success_count}/4")
                print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ—É–¥–∞—á–∏: {failure_count}")
                
                # –î–∞–µ–º –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å
                choice = input("\nüîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ").lower()
                if choice in ['y', 'yes', '–¥–∞', '–¥']:
                    return self.authorize_wordstat()
                
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def format_query(self, query, query_type="base"):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        
        Args:
            query (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            query_type (str): –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ ("base", "exact", "precise")
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        """
        query = query.strip()
        
        if query_type == "base":
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –∫–∞–∫ –µ—Å—Ç—å
            return query
        elif query_type == "exact":
            # –¢–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            return f'"{query}"'
        elif query_type == "precise":
            # –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤ –∫–∞–≤—ã—á–∫–∞—Ö —Å ! –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–ª–æ–≤–æ–º
            words = query.split()
            precise_words = [f"!{word}" for word in words]
            return f'"{" ".join(precise_words)}"'
        else:
            return query
    
    def build_wordstat_url(self, query):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        """
        params = {
            'region': 'all',
            'view': 'table',
            'words': query
        }
        return f"{self.base_url}?{urlencode(params)}"
    
    def parse_frequency_selenium(self, query):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            int or None: –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.driver:
            return None
            
        try:
            url = self.build_wordstat_url(query)
            print(f"  –ó–∞–ø—Ä–æ—Å: {query}")
            print(f"  URL: {url}")
            
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ—Ä–æ—á–µ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if self.is_authorized:
                time.sleep(0.5)  # –ë—ã—Å—Ç—Ä–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            else:
                time.sleep(5)    # –ú–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
            frequency_selectors = [
                # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
                '.wordstat__content-preview-text_last',
                '.wordstat__content-preview-text',
                '.wordstat__number',
                '.wordstat-number',
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                '[class*="wordstat__"]',
                '[class*="preview-text"]',
                
                # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                '.wordstat-table__row:first-child .wordstat-table__cell:nth-child(2)',
                '.table__row:first-child .table__cell:nth-child(2)',
                '[data-testid="frequency"]',
                '.frequency',
                '.stat-value'
            ]
            
            frequency = None
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            for selector in frequency_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        text = element.text.strip()
                        print(f"    –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç '{selector}': {text}")
                        
                        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∑–∞ –¥–∞—Ç–∞ ‚Äì –¥–∞—Ç–∞: –ß–ò–°–õ–û"
                        frequency_match = re.search(r':\s*(\d{1,3}(?:\s\d{3})*)', text)
                        if frequency_match:
                            frequency = int(frequency_match.group(1).replace(' ', ''))
                            print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ': –ß–ò–°–õ–û': {frequency}")
                            break
                        
                        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ
                        numbers = re.findall(r'\b(\d{1,3}(?:\s\d{3})*)\b', text)
                        if numbers:
                            frequency = int(numbers[-1].replace(' ', ''))  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
                            print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–∑ —á–∏—Å–µ–ª: {frequency}")
                            break
                    
                    if frequency:
                        break
                except Exception as e:
                    print(f"    –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{selector}': {e}")
                    continue
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            if frequency is None:
                try:
                    headings = self.driver.find_elements(By.CSS_SELECTOR, 'h1, h2, h3, .title, [class*="title"]')
                    for heading in headings:
                        text = heading.text.strip()
                        if '–æ–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤' in text.lower() or '—á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤' in text.lower():
                            print(f"    –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {text}")
                            numbers = re.findall(r'\b(\d{1,3}(?:\s\d{3})*)\b', text)
                            if numbers:
                                frequency = int(numbers[-1].replace(' ', ''))
                                print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {frequency}")
                                break
                except Exception as e:
                    print(f"    –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ XPath (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
            if frequency is None:
                try:
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
                    xpath_selectors = [
                        "//div[contains(text(), ':')]",
                        "//span[contains(text(), ':')]",
                        "//*[contains(text(), '—á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤')]",
                        "//*[contains(text(), '‚Äì') and contains(text(), ':')]"
                    ]
                    
                    for xpath in xpath_selectors:
                        elements = self.driver.find_elements(By.XPATH, xpath)
                        for element in elements:
                            text = element.text.strip()
                            if ':' in text:
                                print(f"    XPath –Ω–∞–π–¥–µ–Ω: {text}")
                                # –ò—â–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
                                frequency_match = re.search(r':\s*(\d{1,3}(?:\s\d{3})*)', text)
                                if frequency_match:
                                    frequency = int(frequency_match.group(1).replace(' ', ''))
                                    print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø–æ XPath: {frequency}")
                                    break
                        if frequency:
                            break
                except Exception as e:
                    print(f"    –û—à–∏–±–∫–∞ XPath –ø–æ–∏—Å–∫–∞: {e}")
            
            # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if frequency is None:
                try:
                    page_source = self.driver.page_source
                    print("    –ò—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —á–∏—Å–ª–∞–º–∏
                    patterns = [
                        r'–∑–∞\s+\d{2}\.\d{2}\.\d{4}\s*‚Äì\s*\d{2}\.\d{2}\.\d{4}:\s*(\d{1,3}(?:\s\d{3})*)',
                        r'—á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤[^:]+:\s*(\d{1,3}(?:\s\d{3})*)',
                        r'–æ–±—â–µ–µ —á–∏—Å–ª–æ[^:]+:\s*(\d{1,3}(?:\s\d{3})*)',
                        r':\s*(\d{1,3}(?:\s\d{3})*)</div>'
                    ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, page_source, re.IGNORECASE)
                        if matches:
                            frequency = int(matches[-1].replace(' ', ''))
                            print(f"    –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ: {frequency}")
                            break
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ª—é–±—ã–µ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                    if frequency is None:
                        numbers = re.findall(r'\b(\d{1,3}(?:\s\d{3})+)\b', page_source)
                        numbers = [int(n.replace(' ', '')) for n in numbers if int(n.replace(' ', '')) > 100]
                        if numbers:
                            frequency = numbers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
                            print(f"    –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —á–∞—Å—Ç–æ—Ç–∞: {frequency}")
                            
                except Exception as e:
                    print(f"    –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ: {e}")
            
            print(f"  –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {frequency}")
            return frequency
            
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
            return None
    
    def parse_frequency_requests(self, query):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º requests
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            int or None: –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            url = self.build_wordstat_url(query)
            print(f"  –ó–∞–ø—Ä–æ—Å (requests): {query}")
            print(f"  URL: {url}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
            
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ CSS –∫–ª–∞—Å—Å–∞–º –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç
            frequency_selectors = [
                '.wordstat__content-preview-text_last',
                '.wordstat__content-preview-text',
                '.wordstat__number',
                'div[class*="wordstat__"]',
                'span[class*="wordstat"]'
            ]
            
            frequency = None
            
            for selector in frequency_selectors:
                elements = soup.select(selector)
                for element in elements:
                    text = element.get_text().strip()
                    if text:
                        print(f"    –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç '{selector}': {text}")
                        
                        # –ò—â–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è (—Ñ–æ—Ä–º–∞—Ç "–∑–∞ –¥–∞—Ç–∞ ‚Äì –¥–∞—Ç–∞: –ß–ò–°–õ–û")
                        frequency_match = re.search(r':\s*(\d{1,3}(?:\s\d{3})*)', text)
                        if frequency_match:
                            frequency = int(frequency_match.group(1).replace(' ', ''))
                            print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞: {frequency}")
                            break
                
                if frequency:
                    break
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ HTML –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
            if frequency is None:
                print("    –ò—â–µ–º –≤ HTML –∫–æ–¥–µ...")
                html_content = response.text
                
                patterns = [
                    r'–∑–∞\s+\d{2}\.\d{2}\.\d{4}\s*‚Äì\s*\d{2}\.\d{2}\.\d{4}:\s*(\d{1,3}(?:\s\d{3})*)',
                    r'—á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤[^:]+:\s*(\d{1,3}(?:\s\d{3})*)',
                    r'–æ–±—â–µ–µ —á–∏—Å–ª–æ[^:]+:\s*(\d{1,3}(?:\s\d{3})*)',
                    r'wordstat__content-preview-text[^>]*>([^<]*:\s*(\d{1,3}(?:\s\d{3})*))',
                    r'class="[^"]*wordstat[^"]*"[^>]*>([^<]*(\d{1,3}(?:\s\d{3})*))'
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, html_content, re.IGNORECASE)
                    if matches:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        for match in matches:
                            if isinstance(match, tuple):
                                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ (–æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ)
                                number_str = match[-1]
                            else:
                                number_str = match
                            
                            if re.match(r'\d{1,3}(?:\s\d{3})*', number_str):
                                frequency = int(number_str.replace(' ', ''))
                                print(f"    –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –≤ HTML: {frequency}")
                                break
                        if frequency:
                            break
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
            if frequency is None:
                print("    –ò—â–µ–º –ª—é–±—ã–µ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞...")
                # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ HTML
                all_numbers = re.findall(r'\b(\d{1,3}(?:\s\d{3})+)\b', response.text)
                if all_numbers:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                    numbers = [int(n.replace(' ', '')) for n in all_numbers]
                    numbers = [n for n in numbers if n > 1000]  # –ò—Å–∫–ª—é—á–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∏—Å–ª–∞
                    
                    if numbers:
                        frequency = numbers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
                        print(f"    –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ: {frequency}")
            
            print(f"  –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (requests): {frequency}")
            return frequency
            
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ requests –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
            return None
    
    def get_query_frequency(self, query, query_type="base"):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            query_type (str): –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            int or None: –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        """
        formatted_query = self.format_query(query, query_type)
        
        if self.use_selenium:
            return self.parse_frequency_selenium(formatted_query)
        else:
            return self.parse_frequency_requests(formatted_query)
    
    def read_queries_from_file(self, filename):
        """
        –ß—Ç–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            filename (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                queries = [line.strip() for line in file if line.strip()]
            print(f"‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            return queries
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return []
    
    def create_excel_report(self, results, output_filename="wordstat_report.xlsx"):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞
        
        Args:
            results (list): –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            output_filename (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            workbook = openpyxl.Workbook()
            worksheet = workbook.active
            worksheet.title = "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –í–æ—Ä–¥—Å—Ç–∞—Ç"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            headers = ["–ó–∞–ø—Ä–æ—Å", "–ß–∞—Å—Ç–æ—Ç–∞ (–±–∞–∑–æ–≤–∞—è)", "–ß–∞—Å—Ç–æ—Ç–∞ (—Ç–æ—á–Ω–∞—è)", "–ß–∞—Å—Ç–æ—Ç–∞ (—É—Ç–æ—á–Ω–µ–Ω–Ω–∞—è)"]
            for col, header in enumerate(headers, 1):
                cell = worksheet.cell(row=1, column=col)
                cell.value = header
                cell.font = Font(bold=True)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            for row_idx, result in enumerate(results, 2):
                query = result['query']
                base_freq = result.get('base_frequency', 'N/A')
                exact_freq = result.get('exact_frequency', 'N/A')
                precise_freq = result.get('precise_frequency', 'N/A')
                
                # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                url = self.build_wordstat_url(query)
                worksheet.cell(row=row_idx, column=1).hyperlink = url
                worksheet.cell(row=row_idx, column=1).value = query
                worksheet.cell(row=row_idx, column=1).font = Font(color="0000FF", underline="single")
                
                worksheet.cell(row=row_idx, column=2).value = base_freq
                worksheet.cell(row=row_idx, column=3).value = exact_freq
                worksheet.cell(row=row_idx, column=4).value = precise_freq
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            workbook.save(output_filename)
            print(f"‚úì Excel –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_filename}")
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
    
    def process_queries(self, queries):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            queries (list): –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            list: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        results = []
        total_queries = len(queries)
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –í–æ—Ä–¥—Å—Ç–∞—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        if self.use_selenium and self.driver and not self.is_authorized:
            print("\n" + "="*60)
            auth_success = self.authorize_wordstat()
            print("="*60)
            
            if not auth_success:
                print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏)")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if self.is_authorized:
            delay = 0.5  # –ë—ã—Å—Ç—Ä–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É {delay} —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        else:
            delay = 2.0  # –ú–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            print(f"‚ö†Ô∏è  –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É {delay} —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        
        for idx, query in enumerate(queries, 1):
            print(f"\n[{idx}/{total_queries}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: '{query}'")
            
            result = {'query': query}
            
            # –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É
            print("  üìä –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞...")
            result['base_frequency'] = self.get_query_frequency(query, "base")
            time.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ—á–Ω—É—é —á–∞—Å—Ç–æ—Ç—É
            print("  üéØ –¢–æ—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞...")
            result['exact_frequency'] = self.get_query_frequency(query, "exact")
            time.sleep(delay)
            
            # –ü–∞—Ä—Å–∏–º —É—Ç–æ—á–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç–æ—Ç—É
            print("  üîç –£—Ç–æ—á–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞...")
            result['precise_frequency'] = self.get_query_frequency(query, "precise")
            time.sleep(delay)
            
            results.append(result)
            
            print(f"  ‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['base_frequency']} | {result['exact_frequency']} | {result['precise_frequency']}")
        
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebDriver"""
        if self.driver:
            self.driver.quit()
            print("‚úì WebDriver –∑–∞–∫—Ä—ã—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("=== –ü–∞—Ä—Å–µ—Ä –Ø–Ω–¥–µ–∫—Å –í–æ—Ä–¥—Å—Ç–∞—Ç ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    input_file = "queries.txt"
    if not os.path.exists(input_file):
        print(f"‚úó –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {input_file} –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
    parser = WordstatParser(use_selenium=True)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
        queries = parser.read_queries_from_file(input_file)
        if not queries:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        results = parser.process_queries(queries)
        
        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        output_file = "wordstat_report.xlsx"
        parser.create_excel_report(results, output_file)
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚úó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        parser.close()


if __name__ == "__main__":
    main()
